# DO NOT EDIT THIS FILE DIRECTLY
# This is a file generated from a literate programing source file located at
# https://github.com/zzamboni/elvish-themes/blob/master/chain.org.
# You should make any changes there and regenerate it from Emacs org-mode using C-c C-v t

use re

use github.com/muesli/elvish-libs/git

prompt_segments = [ su dir git_branch git_combined arrow ]
rprompt_segments = [ ]

glyph = [
  &prompt=        ">"
  &git_branch=    "⎇"
  &git_dirty=     "✎ "
  &git_ahead=     "⬆"
  &git_behind=    "⬇"
  &git_staged=    "✔"
  &git_untracked= "+"
  &su=            "⚡"
  &chain=         "─"
]

segment_style = [
  &chain=      default
  &su=         yellow
  &dir=        cyan
  &git_branch= blue
  &git_dirty=  yellow
  &git_ahead=  "38;5;52"
  &git_behind= "38;5;52"
  &git_staged= "38;5;22"
  &git_untracked= "38;5;52"
  &timestamp=  gray
]

prompt_pwd_dir_length = 1

timestamp_format = "%R"

root_id = 0

bold_prompt = $false

fn -colorized [what color]{
  if (!=s $color default) {
    if $bold_prompt {
      color = $color";bold"
    }
    edit:styled $what $color
  } else {
    put $what
  }
}

fn -colorized-glyph [segment_name]{
  -colorized $glyph[$segment_name] $segment_style[$segment_name]
}

fn prompt_segment [style @texts]{
  text = "["(joins ' ' $texts)"]"
  -colorized $text $style
}

last_git_ahead = 0
last_git_behind = 0
last_git_dirty = 0
last_git_untracked = 0
last_staged_count = 0

fn -parse_git {
  last_git_ahead last_git_behind = (git:rev_count)
  last_git_dirty last_git_untracked = (git:change_count)
  last_staged_count = (git:staged_count)
}

fn segment_git_branch {
  branch = (git:branch_name)
  if (not-eq $branch "") {
    prompt_segment $segment_style[git_branch] $glyph[git_branch] $branch
  }
}

fn segment_git_dirty {
  if (> $last_git_dirty 0) {
    prompt_segment $segment_style[git_dirty] $glyph[git_dirty]
  }
}

fn segment_git_ahead {
	if (> $last_git_ahead 0) {
		prompt_segment $segment_style[git_ahead] $glyph[git_ahead]
	}
}

fn segment_git_behind {
	if (> $last_git_behind 0) {
		prompt_segment $segment_style[git_behind] $glyph[git_behind]
	}
}

fn segment_git_staged {
	if (> $last_staged_count 0) {
		prompt_segment $segment_style[git_staged] $glyph[git_staged]
	}
}

fn segment_git_untracked {
	if (> $last_git_untracked 0) {
		prompt_segment $segment_style[git_untracked] $glyph[git_untracked]
	}
}

fn segment_git_combined {
  indicators = []
  if (> $last_git_untracked 0) {
    indicators = [ $@indicators (-colorized-glyph git_untracked) ]
  }
  if (> $last_git_dirty 0) {
    indicators = [ $@indicators (-colorized-glyph git_dirty) ]
  }
  if (> $last_staged_count 0) {
    indicators = [ $@indicators (-colorized-glyph git_staged) ]
  }
  if (> $last_git_ahead 0) {
    indicators = [ $@indicators (-colorized-glyph git_ahead) ]
  }
  if (> $last_git_behind 0) {
    indicators = [ $@indicators (-colorized-glyph git_behind) ]
  }
  if (> (count $indicators) 0) {
    put '[' $@indicators ']'
  }
}

fn -prompt_pwd {
  tmp = (tilde-abbr $pwd)
  if (== $prompt_pwd_dir_length 0) {
    put $tmp
  } else {
    re:replace '(\.?[^/]{'$prompt_pwd_dir_length'})[^/]*/' '$1/' $tmp
  }
}

fn segment_dir {
  prompt_segment $segment_style[dir] (-prompt_pwd)
}

fn segment_su {
  uid = (id -u)
  if (eq $uid $root_id) {
    prompt_segment $segment_style[su] $glyph[su]
  }
}

fn segment_timestamp {
  prompt_segment $segment_style[timestamp] (date +$timestamp_format)
}

fn segment_arrow {
  -colorized $glyph[prompt]" " green
}

# List of built-in segments
segment = [
  &su=            $segment_su~
  &dir=           $segment_dir~
  &git_branch=    $segment_git_branch~
  &git_dirty=     $segment_git_dirty~
  &git_ahead=     $segment_git_ahead~
  &git_behind=    $segment_git_behind~
  &git_staged=    $segment_git_staged~
  &git_untracked= $segment_git_untracked~
  &git_combined=  $segment_git_combined~
  &arrow=         $segment_arrow~
  &timestamp=     $segment_timestamp~
]

fn -interpret-segment [seg]{
  k = (kind-of $seg)
  if (eq $k 'fn') {
    # If it's a lambda, run it
    $seg
  } elif (eq $k 'string') {
    if (has-key $segment $seg) {
      # If it's the name of a built-in segment, run its function
      $segment[$seg]
    } else {
      # If it's any other string, return it as-is
      put $seg
    }
  } elif (eq $k 'styled') {
    # If it's an edit:styled, return it as-is
    put $seg
  }
}

fn -build-chain [segments]{
  first = $true
  output = ""
  -parse_git
  for seg $segments {
    time = (-time { output = [(-interpret-segment $seg)] })
    if (> (count $output) 0) {
      if (not $first) {
        -colorized $glyph[chain] $segment_style[chain]
      }
      put $@output
      first = $false
    }
  }
}

fn prompt [@skipcheck]{
  put (-build-chain $prompt_segments)
}

fn rprompt [@skipcheck]{
  put (-build-chain $rprompt_segments)
}

fn setup {
  edit:prompt = $prompt~
  edit:rprompt = $rprompt~
}
